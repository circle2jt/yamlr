title: Auto update package version
description: Update package version and collect git logs into commit
# debug: all
vars:
  preid: "" # [--preid]
  versionName: "" # [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease]
  commitFormat: ""
  changeDir: ../changelogs
  changeFile: ../CHANGELOG.md
  commitFiles: []
  force: false
  version: ""
  lastCommit: ""
  scan: true
  scanIndex: 0
  scanCount: 10
  gitLogs: []
runs:
  - echo: ${$v}
  - name: Validate input
    runs:
      - if: ${!$v.versionName}
        input'select:
          title: Version name
          choices:
            - title: major
              value: major
            - title: minor
              value: minor
            - title: patch
              value: patch
            - title: premajor
              value: premajor
            - title: preminor
              value: preminor
            - title: prepatch
              value: prepatch
            - title: prerelease
              value: prerelease
        vars: versionName
      - if: ${!$v.preid && !$v.force}
        input'text:
          title: Preid
        vars: preid
  - exec'js: |
      const matchVersion = []
      const allVersions = ['major', 'minor', 'patch', 'premajor', 'preminor', 'prepatch', 'prerelease']
      allVersions.find(v => {
        matchVersion.push(v)
        return $v.versionName === v
      })
      $v.matchVersion = matchVersion.map(v => `(${v} )`).join('|')

      if (!$v.commitFormat) $v.commitFormat = `chore[^:]*: ${$v.matchVersion}([^ ]+)`
      $v.changeDir = this.getPath($v.changeDir)
      $v.changeFile = this.getPath($v.changeFile)
  - name: Get new version ${$v.matchVersion}
    exec'sh: |
      mkdir -p "${$v.changeDir}"
      npm version --no-commit-hooks --no-git-tag-version --tag-version-prefix="" --preid=${$v.preid} ${$v.versionName}
    vars:
      lastCommit: "chore${$v.versionName === 'major' ? '!' : ''}: ${$v.versionName} ${this.result}"
      version: ${this.result}

  - name: Commit information
    runs:
      - echo: "Version: ${$v.versionName} (${$v.version})"
      - echo: "Preid: ${$v.preid}"
      - echo: "Commit: ${$v.lastCommit}"

      - if: ${!$v.force}
        pause:

  - name: Collect git logs ${$v.scanIndex}
    loop: ${$v.scan}
    runs:
      - exec'sh: |
          git log --skip ${$v.scanIndex} -n ${$v.scanCount} --pretty="format:* %s (%h)"
        vars:
          gitLog: ${this.result.split('\n').map(e => e.trim()).filter(e => e)}
      - exec'js: |
          $v.scanIndex += $v.scanCount
          const { gitLog, gitLogs } = $v
          const m = new RegExp($v.commitFormat)
          for (const log of gitLog) {
            if (m.test(log)) {
              $v.scan = false
              this.logger.debug('scan: stoped when match')
              break          
            }
            gitLogs.push(log)
          }
          if ($v.scan && gitLog.length < $v.scanCount) {
            $v.scan = false
            this.logger.debug('scan: stoped when end')
          }
  - name: Write logs to changelog files
    file'write:
      path: ${$v.changeDir}/${Date.now()}--${$v.version}.md
      content: |
        ### ${$v.version}

        ${$v.gitLogs.join('\n')}

  - name: Concat changes file
    runs:
      - exec'js: |
          const { readdirSync, readFileSync } = require('fs') 
          const { join, basename } = require('path')
          const files = readdirSync($v.changeDir)
          files.sort().reverse()
          $v.changeContent = []
          $v.changeMenu = []
          files.forEach(f => {
            const idx = f.indexOf('--')
            const fname = basename(f)
            const d = fname.substring(0, idx)
            const mn = fname.substring(idx+2)
            $v.changeMenu.push(`- [${mn}](#${d})  -  _${new Date(+d).toLocaleString()}_`)
            const content = readFileSync(join($v.changeDir, f)).toString()
            if (mn === `${$v.version}.md`) $v.lastCommitContent = content.substring(content.indexOf('\n'))
            $v.changeContent.push(`<a id="${d}"></a>\n${content}`)
          })
          this.logger.debug(files)
      - if: ${$v.changeContent?.length}
        file'write:
          path: ${$v.changeFile}
          content: |
            # Changes logs

            ## History

            ${$v.changeMenu.join('\n')}

            ## Details

            ${$v.changeContent.join('  \n')}

  - name: Add and commit changelog
    runs:
      - exec'js: |
          $v.gitCommitFiles = $v.commitFiles.map(file => {
            return `git add ${this.getPath(file)}`
          }).join('\n')
      - exec'sh: |
          git add ${$v.changeFile}
          git add ${$v.changeDir}
          ${$v.gitCommitFiles}
          git commit -m "${$v.lastCommit}${$v.lastCommitContent.replace(/"/g, '\\"')}"
          git log

  - input'confirm:
      title: Do you want to push to repository ?
      default: false
    vars: isCommit

  - if: ${ $v.isCommit }
    exec'sh: |
      git push
